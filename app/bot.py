from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy.orm import Session
from app.models import User, Sprint, Word, SprintStatus
from app.filters import is_valid_input
from app.config import ADMIN_IDS
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import csv
import io
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    logger.debug(f"Received /start from user_id: {user_id}, username: @{username}")
    try:
        db_user = db.query(User).filter(User.id == user_id).first()
        if not db_user:
            db_user = User(id=user_id, username=username)
            db.add(db_user)
            db.commit()
        else:
            db_user.username = username
            db.commit()

        active_sprints = db.query(Sprint).filter(Sprint.status == SprintStatus.active).all()
        response = "üéâ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫–∏–Ω—É—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞?\n\n"
        if active_sprints:
            response += "üìã –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–∏–Ω—Ç—ã:\n"
            for sprint in active_sprints:
                response += f"–°–ø—Ä–∏–Ω—Ç #{sprint.id}: –¢–µ–º–∞ '{sprint.theme}', –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sprint.duration} –¥–Ω–µ–π\n"
            response += "\n–û—Ç–ø—Ä–∞–≤—å 1 –∏–ª–∏ 3 —Å–ª–æ–≤–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è!"
        else:
            response += "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤. –ñ–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ!"
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in start for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    logger.debug(f"Received /whoami from user_id: {user_id}, username: @{username}")
    try:
        is_admin = user_id in ADMIN_IDS
        response = (
            f"‚ÑπÔ∏è –¢–≤–æ–π Telegram ID: {user_id}\n"
            f"Username: @{username}\n"
            f"–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞: {'–î–∞' if is_admin else '–ù–µ—Ç'}\n"
        )
        if is_admin:
            response += "–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in whoami for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    logger.debug(f"Received /help from user_id: {user_id}")
    try:
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help!")
            return
        response = (
            "üìñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∞:\n"
            "/start_sprint <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 7 –∏–ª–∏ 30> <—Ç–µ–º–∞> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø—Ä–∏–Ω—Ç\n"
            "/end_sprint <id> - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç\n"
            "/get_words <id> - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –≤ CSV\n"
            "/list_sprints - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø—Ä–∏–Ω—Ç—ã\n"
            "/broadcast <—Ç–µ–∫—Å—Ç> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/test_sprint - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
            "\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        )
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in help_command for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

async def start_sprint(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    command = update.message.text.split()[0]
    logger.debug(f"Received {command} from user_id: {user_id}, text: {update.message.text}, args: {context.args}")
    try:
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return

        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /start_sprint <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 7 –∏–ª–∏ 30> <—Ç–µ–º–∞>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return

        duration = int(context.args[0])
        if duration not in [1, 7, 30]:
            await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1, 7 –∏–ª–∏ 30 –¥–Ω–µ–π!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return

        theme = " ".join(context.args[1:])
        if not theme:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Ç–µ–º—É —Å–ø—Ä–∏–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return

        sprint = Sprint(
            duration=duration,
            theme=theme,
            start_date=datetime.utcnow(),
            end_date=datetime.utcnow() + timedelta(days=duration)
        )
        db.add(sprint)
        db.commit()

        users = db.query(User).all()
        for user in users:
            await context.bot.send_message(
                chat_id=user.id,
                text=f"üéâ –ù–æ–≤—ã–π —Å–ø—Ä–∏–Ω—Ç –Ω–∞—á–∞–ª—Å—è! –¢–µ–º–∞: {theme}. –í—Ä–µ–º—è: {duration} –¥–Ω–µ–π. –ö–∏–¥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞!"
            )

        await update.message.reply_text(
            f"‚úÖ –°–ø—Ä–∏–Ω—Ç #{sprint.id} –∑–∞–ø—É—â–µ–Ω!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        )
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π: /start_sprint <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 7 –∏–ª–∏ 30> <—Ç–µ–º–∞>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    except Exception as e:
        logger.error(f"Error in start_sprint for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")

async def test_sprint(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    logger.debug(f"Received /test_sprint from user_id: {user_id}, text: {update.message.text}")
    await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–ø–∏—à–∏ /help –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥.")

async def end_sprint(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    logger.debug(f"Received /end_sprint from user_id: {user_id}, args: {context.args}")
    try:
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID —Å–ø—Ä–∏–Ω—Ç–∞: /end_sprint <id>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        sprint_id = int(context.args[0])
        sprint = db.query(Sprint).filter(Sprint.id == sprint_id).first()
        if not sprint:
            await update.message.reply_text("‚ùå –°–ø—Ä–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        sprint.status = SprintStatus.completed
        db.commit()
        await update.message.reply_text(
            f"‚úÖ –°–ø—Ä–∏–Ω—Ç #{sprint_id} –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        )
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID —Å–ø—Ä–∏–Ω—Ç–∞: /end_sprint <id>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    except Exception as e:
        logger.error(f"Error in end_sprint for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø—Ä–∏–Ω—Ç!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")

async def get_words(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    logger.debug(f"Received /get_words from user_id: {user_id}, args: {context.args}")
    try:
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID —Å–ø—Ä–∏–Ω—Ç–∞: /get_words <id>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        sprint_id = int(context.args[0])
        words = db.query(Word).filter(Word.sprint_id == sprint_id).all()
        if not words:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(["word", "user_id", "language", "submitted_at"])
        for word in words:
            writer.writerow([word.words, word.user_id, word.language, word.submitted_at])
        output.seek(0)
        await context.bot.send_document(
            chat_id=user_id,
            document=io.BytesIO(output.getvalue().encode()),
            filename=f"sprint_{sprint_id}_words.csv"
        )
        await update.message.reply_text(
            f"‚úÖ –°–ª–æ–≤–∞ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ #{sprint_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        )
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID —Å–ø—Ä–∏–Ω—Ç–∞: /get_words <id>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    except Exception as e:
        logger.error(f"Error in get_words for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")

async def list_sprints(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    logger.debug(f"Received /list_sprints from user_id: {user_id}")
    try:
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        sprints = db.query(Sprint).all()
        if not sprints:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–ø—Ä–∏–Ω—Ç–æ–≤!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        response = "üìã –°–ø—Ä–∏–Ω—Ç—ã:\n"
        for sprint in sprints:
            response += f"ID: {sprint.id}, –¢–µ–º–∞: {sprint.theme}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sprint.duration} –¥–Ω–µ–π, –°—Ç–∞—Ç—É—Å: {sprint.status.value}\n"
        response += "\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in list_sprints for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    logger.debug(f"Received /broadcast from user_id: {user_id}, args: {context.args}")
    try:
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        message = " ".join(context.args)
        if not message:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            return
        users = db.query(User).all()
        for user in users:
            await context.bot.send_message(
                chat_id=user.id,
                text=f"üì¢ {message}"
            )
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    except Exception as e:
        logger.error(f"Error in broadcast for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    logger.debug(f"Received message from user_id: {user_id}, text: '{text}'")
    try:
        active_sprints = db.query(Sprint).filter(Sprint.status == SprintStatus.active).all()
        if not active_sprints:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤! –ñ–¥–∏ –Ω–æ–≤—ã–π!")
            return
        is_valid, result = is_valid_input(text)
        if not is_valid:
            await update.message.reply_text(result)
            return
        language = result
        for sprint in active_sprints:
            existing_submission = db.query(Word).filter(Word.user_id == user_id, Word.sprint_id == sprint.id).first()
            if existing_submission:
                await update.message.reply_text(
                    f"‚ùå –¢—ã —É–∂–µ –∫–∏–Ω—É–ª —Å–ª–æ–≤–∞ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ #{sprint.id}!")
                continue
            word = Word(user_id=user_id, sprint_id=sprint.id, words=text, language=language)
            db.add(word)
            db.commit()
            await update.message.reply_text(
                f"‚úÖ –°–ª–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ #{sprint.id}!")
    except Exception as e:
        logger.error(f"Error in handle_message for user_id {user_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")

async def handle_unrecognized_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    logger.debug(f"Unrecognized command from user_id: {user_id}, text: '{text}'")
    await update.message.reply_text(
        f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!"
    )

async def daily_report(context: ContextTypes.DEFAULT_TYPE, db: Session):
    logger.debug("Running daily report")
    try:
        today = datetime.utcnow().date()
        start_of_day = datetime.combine(today, datetime.min.time())
        new_users = db.query(User).filter(User.joined_at >= start_of_day).count()
        new_words = db.query(Word).filter(Word.submitted_at >= start_of_day).count()
        sprints = db.query(Sprint).all()
        report = f"üìä –û—Ç—á—ë—Ç –∑–∞ {today}:\n–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}\n–ù–æ–≤—ã—Ö —Å–ª–æ–≤: {new_words}\n"
        for sprint in sprints:
            total_words = db.query(Word).filter(Word.sprint_id == sprint.id).count()
            report += f"–°–ø—Ä–∏–Ω—Ç #{sprint.id} ({sprint.status.value}): {total_words} —Å–ª–æ–≤\n"
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(chat_id=admin_id, text=report)
    except Exception as e:
        logger.error(f"Error in daily_report: {e}", exc_info=True)

def setup_bot(app: Application, db: Session):
    logger.debug(f"Setting up bot with ADMIN_IDS: {ADMIN_IDS}")
    try:
        logger.debug("Registering command handlers")
        app.add_handler(CommandHandler("start", lambda update, context: start(update, context, db)))
        logger.debug("Registered /start handler")
        app.add_handler(CommandHandler("whoami", lambda update, context: whoami(update, context, db)))
        logger.debug("Registered /whoami handler")
        app.add_handler(CommandHandler("help", lambda update, context: help_command(update, context, db)))
        logger.debug("Registered /help handler")
        app.add_handler(CommandHandler("start_sprint", lambda update, context: start_sprint(update, context, db)))
        logger.debug("Registered /start_sprint handler")
        app.add_handler(CommandHandler("startsprint", lambda update, context: start_sprint(update, context, db)))
        logger.debug("Registered /startsprint handler")
        app.add_handler(CommandHandler("test_sprint", lambda update, context: test_sprint(update, context, db)))
        logger.debug("Registered /test_sprint handler")
        app.add_handler(CommandHandler("end_sprint", lambda update, context: end_sprint(update, context, db)))
        logger.debug("Registered /end_sprint handler")
        app.add_handler(CommandHandler("get_words", lambda update, context: get_words(update, context, db)))
        logger.debug("Registered /get_words handler")
        app.add_handler(CommandHandler("list_sprints", lambda update, context: list_sprints(update, context, db)))
        logger.debug("Registered /list_sprints handler")
        app.add_handler(CommandHandler("broadcast", lambda update, context: broadcast(update, context, db)))
        logger.debug("Registered /broadcast handler")
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: handle_message(update, context, db)))
        logger.debug("Registered text message handler")
        app.add_handler(MessageHandler(filters.COMMAND, lambda update, context: handle_unrecognized_command(update, context)))
        logger.debug("Registered unrecognized command handler")

        logger.debug("Setting up scheduler for daily report")
        scheduler = AsyncIOScheduler()
        scheduler.add_job(daily_report, 'cron', hour=0, minute=0, args=[app.bot, db])
        scheduler.start()
        logger.debug("Bot setup completed")
    except Exception as e:
        logger.error(f"Error in setup_bot: {e}", exc_info=True)
        raise
