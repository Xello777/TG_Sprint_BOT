from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy.orm import Session
from app.models import User, Sprint, Word, SprintStatus
from app.filters import is_valid_input
from app.config import ADMIN_ID
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import csv
import io

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    username = update.effective_user.username
    db_user = db.query(User).filter(User.id == user_id).first()
    if not db_user:
        db_user = User(id=user_id, username=username)
        db.add(db_user)
        db.commit()
    await update.message.reply_text(
        "üéâ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫–∏–Ω—É—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞? (Hi! Ready to drop some words for the sprint?)"
    )

async def start_sprint(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã! (Only the admin can start sprints!)")
        return
    try:
        duration = int(context.args[0])
        if duration not in [1, 7, 30]:
            raise ValueError
        theme = " ".join(context.args[1:])
        if not theme:
            raise ValueError
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /start_sprint <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 7 –∏–ª–∏ 30> <—Ç–µ–º–∞> (Use: /start_sprint <duration: 1, 7, or 30> <theme>)"
        )
        return
    sprint = Sprint(
        duration=duration,
        theme=theme,
        start_date=datetime.utcnow(),
        end_date=datetime.utcnow() + timedelta(days=duration)
    )
    db.add(sprint)
    db.commit()
    users = db.query(User).all()
    for user in users:
        await context.bot.send_message(
            chat_id=user.id,
            text=f"üéâ –ù–æ–≤—ã–π —Å–ø—Ä–∏–Ω—Ç –Ω–∞—á–∞–ª—Å—è! –¢–µ–º–∞: {theme}. –í—Ä–µ–º—è: {duration} –¥–Ω–µ–π. –ö–∏–¥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞! (New sprint started! Theme: {theme}. Duration: {duration} days. Send your words!)"
        )
    await update.message.reply_text(f"‚úÖ –°–ø—Ä–∏–Ω—Ç #{sprint.id} –∑–∞–ø—É—â–µ–Ω! (Sprint #{sprint.id} started!)")

async def end_sprint(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã! (Only the admin can end sprints!)")
        return
    try:
        sprint_id = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID —Å–ø—Ä–∏–Ω—Ç–∞: /end_sprint <id> (Specify sprint ID: /end_sprint <id>)")
        return
    sprint = db.query(Sprint).filter(Sprint.id == sprint_id).first()
    if not sprint:
        await update.message.reply_text("‚ùå –°–ø—Ä–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! (Sprint not found!)")
        return
    sprint.status = SprintStatus.completed
    db.commit()
    await update.message.reply_text(f"‚úÖ –°–ø—Ä–∏–Ω—Ç #{sprint_id} –∑–∞–≤–µ—Ä—à—ë–Ω! (Sprint #{sprint_id} completed!)")

async def get_words(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞! (Only the admin can get words!)")
        return
    try:
        sprint_id = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID —Å–ø—Ä–∏–Ω—Ç–∞: /get_words <id> (Specify sprint ID: /get_words <id>)")
        return
    words = db.query(Word).filter(Word.sprint_id == sprint_id).all()
    if not words:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞! (No words for this sprint!)")
        return
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["word", "user_id", "language", "submitted_at"])
    for word in words:
        writer.writerow([word.words, word.user_id, word.language, word.submitted_at])
    output.seek(0)
    await context.bot.send_document(
        chat_id=update.effective_user.id,
        document=io.BytesIO(output.getvalue().encode()),
        filename=f"sprint_{sprint_id}_words.csv"
    )

async def list_sprints(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã! (Only the admin can list sprints!)")
        return
    sprints = db.query(Sprint).all()
    if not sprints:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–ø—Ä–∏–Ω—Ç–æ–≤! (No sprints!)")
        return
    response = "üìã –°–ø—Ä–∏–Ω—Ç—ã:\n"
    for sprint in sprints:
        response += f"ID: {sprint.id}, –¢–µ–º–∞: {sprint.theme}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sprint.duration} –¥–Ω–µ–π, –°—Ç–∞—Ç—É—Å: {sprint.status.value} (Status: {sprint.status.value})\n"
    await update.message.reply_text(response)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! (Only the admin can broadcast messages!)")
        return
    message = " ".join(context.args)
    if not message:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç> (Specify message: /broadcast <text>)")
        return
    users = db.query(User).all()
    for user in users:
        await context.bot.send_message(
            chat_id=user.id,
            text=f"üì¢ {message} ({message})"
        )
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! (Message sent to all users!)")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Session):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    active_sprints = db.query(Sprint).filter(Sprint.status == SprintStatus.active).all()
    if not active_sprints:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤! –ñ–¥–∏ –Ω–æ–≤—ã–π! (No active sprints! Wait for a new one!)")
        return
    is_valid, result = is_valid_input(text)
    if not is_valid:
        await update.message.reply_text(result)
        return
    language = result
    for sprint in active_sprints:
        existing_submission = db.query(Word).filter(Word.user_id == user_id, Word.sprint_id == sprint.id).first()
        if existing_submission:
            await update.message.reply_text(
                f"‚ùå –¢—ã —É–∂–µ –∫–∏–Ω—É–ª —Å–ª–æ–≤–∞ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ #{sprint.id}! (You already submitted words for sprint #{sprint.id}!)")
            continue
        word = Word(user_id=user_id, sprint_id=sprint.id, words=text, language=language)
        db.add(word)
        db.commit()
        await update.message.reply_text(
            f"‚úÖ –°–ª–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ #{sprint.id}! (Words accepted for sprint #{sprint.id}!)")

async def daily_report(context: ContextTypes.DEFAULT_TYPE, db: Session):
    today = datetime.utcnow().date()
    start_of_day = datetime.combine(today, datetime.min.time())
    new_users = db.query(User).filter(User.joined_at >= start_of_day).count()
    new_words = db.query(Word).filter(Word.submitted_at >= start_of_day).count()
    sprints = db.query(Sprint).all()
    report = f"üìä –û—Ç—á—ë—Ç –∑–∞ {today}:\n–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}\n–ù–æ–≤—ã—Ö —Å–ª–æ–≤: {new_words}\n"
    for sprint in sprints:
        total_words = db.query(Word).filter(Word.sprint_id == sprint.id).count()
        report += f"–°–ø—Ä–∏–Ω—Ç #{sprint.id} ({sprint.status.value}): {total_words} —Å–ª–æ–≤\n"
    report += f"(Report for {today}: New users: {new_users}, New words: {new_words})"
    await context.bot.send_message(chat_id=ADMIN_ID, text=report)

def setup_bot(app: Application, db: Session):
    app.add_handler(CommandHandler("start", lambda update, context: start(update, context, db)))
    app.add_handler(CommandHandler("start_sprint", lambda update, context: start_sprint(update, context, db)))
    app.add_handler(CommandHandler("end_sprint", lambda update, context: end_sprint(update, context, db)))
    app.add_handler(CommandHandler("get_words", lambda update, context: get_words(update, context, db)))
    app.add_handler(CommandHandler("list_sprints", lambda update, context: list_sprints(update, context, db)))
    app.add_handler(CommandHandler("broadcast", lambda update, context: broadcast(update, context, db)))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: handle_message(update, context, db)))
    scheduler = AsyncIOScheduler()
    scheduler.add_job(daily_report, 'cron', hour=0, minute=0, args=[app.bot, db])
    scheduler.start()
